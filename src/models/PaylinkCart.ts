/* tslint:disable */
/* eslint-disable */
/**
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you\'re integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it\'s a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * The version of the OpenAPI document: 6.6.40
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PaylinkCartItemModel } from './PaylinkCartItemModel';
import {
    PaylinkCartItemModelFromJSON,
    PaylinkCartItemModelFromJSONTyped,
    PaylinkCartItemModelToJSON,
} from './PaylinkCartItemModel';

/**
 * 
 * @export
 * @interface PaylinkCart
 */
export interface PaylinkCart {
    /**
     * 
     * @type {Array<PaylinkCartItemModel>}
     * @memberof PaylinkCart
     */
    contents?: Array<PaylinkCartItemModel>;
    /**
     * A coupon redeemed with the transaction.
     * @type {string}
     * @memberof PaylinkCart
     */
    coupon?: string;
    /**
     * The mode field specifies the behaviour or functionality of the cart.
     * 
     * Valid values are:
     * 
     *  0 - No cart - No cart is shown
     *  1 - Read-only - The cart is shown with a breakdown of the item details provided by objects in the contents array.
     *  2 - Selection cart - The cart is shown as a drop-down box of available cart items that the customer can a single item select from.
     *  3 - Dynamic cart - a text box is rendered to enable the operator to input an amount.
     *  4 - Multi cart - The cart is displayed with items rendered with selectable quantities.
     * 
     * @type {number}
     * @memberof PaylinkCart
     */
    mode?: number;
    /**
     * Specifies a description about the product or service that is the subject of the transaction. It will be rendered in the header of the page with no labels.
     * @type {string}
     * @memberof PaylinkCart
     */
    productDescription?: string;
    /**
     * Specifies information about the product or service that is the subject of the transaction. It will be rendered in the header of the page.
     * @type {string}
     * @memberof PaylinkCart
     */
    productInformation?: string;
    /**
     * The shipping amount of the transaction in the lowest denomination of currency.
     * @type {number}
     * @memberof PaylinkCart
     */
    shipping?: number;
    /**
     * The tax amount of the transaction in the lowest denomination of currency.
     * @type {number}
     * @memberof PaylinkCart
     */
    tax?: number;
}

/**
 * Check if a given object implements the PaylinkCart interface.
 */
export function instanceOfPaylinkCart(value: object): value is PaylinkCart {
    return true;
}

export function PaylinkCartFromJSON(json: any): PaylinkCart {
    return PaylinkCartFromJSONTyped(json, false);
}

export function PaylinkCartFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaylinkCart {
    if (json == null) {
        return json;
    }
    return {
        
        'contents': json['contents'] == null ? undefined : ((json['contents'] as Array<any>).map(PaylinkCartItemModelFromJSON)),
        'coupon': json['coupon'] == null ? undefined : json['coupon'],
        'mode': json['mode'] == null ? undefined : json['mode'],
        'productDescription': json['product_description'] == null ? undefined : json['product_description'],
        'productInformation': json['product_information'] == null ? undefined : json['product_information'],
        'shipping': json['shipping'] == null ? undefined : json['shipping'],
        'tax': json['tax'] == null ? undefined : json['tax'],
    };
}

export function PaylinkCartToJSON(value?: PaylinkCart | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'contents': value['contents'] == null ? undefined : ((value['contents'] as Array<any>).map(PaylinkCartItemModelToJSON)),
        'coupon': value['coupon'],
        'mode': value['mode'],
        'product_description': value['productDescription'],
        'product_information': value['productInformation'],
        'shipping': value['shipping'],
        'tax': value['tax'],
    };
}

