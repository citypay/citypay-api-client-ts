/* tslint:disable */
/* eslint-disable */
/**
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you\'re integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it\'s a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * The version of the OpenAPI document: 6.6.40
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Card
 */
export interface Card {
    /**
     * Defines whether the card is a commercial card.
     * @type {boolean}
     * @memberof Card
     */
    binCommercial?: boolean;
    /**
     * Defines whether the card is a corporate business card.
     * @type {boolean}
     * @memberof Card
     */
    binCorporate?: boolean;
    /**
     * The determined country where the card was issued.
     * @type {string}
     * @memberof Card
     */
    binCountryIssued?: string;
    /**
     * Defines whether the card is a credit card.
     * @type {boolean}
     * @memberof Card
     */
    binCredit?: boolean;
    /**
     * The default currency determined for the card.
     * @type {string}
     * @memberof Card
     */
    binCurrency?: string;
    /**
     * Defines whether the card is a debit card.
     * @type {boolean}
     * @memberof Card
     */
    binDebit?: boolean;
    /**
     * A description of the bin on the card to identify what type of product the card is.
     * @type {string}
     * @memberof Card
     */
    binDescription?: string;
    /**
     * Defines whether the card is regulated within the EU.
     * @type {boolean}
     * @memberof Card
     */
    binEu?: boolean;
    /**
     * The id of the card that is returned. Should be used for referencing the card when perform any changes.
     * @type {string}
     * @memberof Card
     */
    cardId?: string;
    /**
     * The status of the card such, valid values are
     * 
     *  - ACTIVE the card is active for processing
     * 
     *  - INACTIVE the card is not active for processing
     * 
     *  - EXPIRED for cards that have passed their expiry date.
     * 
     * @type {string}
     * @memberof Card
     */
    cardStatus?: string;
    /**
     * The date time of when the card was created.
     * @type {Date}
     * @memberof Card
     */
    dateCreated?: Date;
    /**
     * Determines if the card is the default card for the account and should be regarded as the first option to be used for processing.
     * @type {boolean}
     * @memberof Card
     */
    _default?: boolean;
    /**
     * The expiry month of the card.
     * @type {number}
     * @memberof Card
     */
    expmonth?: number;
    /**
     * The expiry year of the card.
     * @type {number}
     * @memberof Card
     */
    expyear?: number;
    /**
     * A label which identifies this card.
     * @type {string}
     * @memberof Card
     */
    label?: string;
    /**
     * A label which also provides the expiry date of the card.
     * @type {string}
     * @memberof Card
     */
    label2?: string;
    /**
     * The last 4 digits of the card to aid in identification.
     * @type {string}
     * @memberof Card
     */
    last4digits?: string;
    /**
     * The name on the card.
     * @type {string}
     * @memberof Card
     */
    nameOnCard?: string;
    /**
     * The scheme that issued the card.
     * @type {string}
     * @memberof Card
     */
    scheme?: string;
    /**
     * A token that can be used to process against the card.
     * @type {string}
     * @memberof Card
     */
    token?: string;
}

/**
 * Check if a given object implements the Card interface.
 */
export function instanceOfCard(value: object): value is Card {
    return true;
}

export function CardFromJSON(json: any): Card {
    return CardFromJSONTyped(json, false);
}

export function CardFromJSONTyped(json: any, ignoreDiscriminator: boolean): Card {
    if (json == null) {
        return json;
    }
    return {
        
        'binCommercial': json['bin_commercial'] == null ? undefined : json['bin_commercial'],
        'binCorporate': json['bin_corporate'] == null ? undefined : json['bin_corporate'],
        'binCountryIssued': json['bin_country_issued'] == null ? undefined : json['bin_country_issued'],
        'binCredit': json['bin_credit'] == null ? undefined : json['bin_credit'],
        'binCurrency': json['bin_currency'] == null ? undefined : json['bin_currency'],
        'binDebit': json['bin_debit'] == null ? undefined : json['bin_debit'],
        'binDescription': json['bin_description'] == null ? undefined : json['bin_description'],
        'binEu': json['bin_eu'] == null ? undefined : json['bin_eu'],
        'cardId': json['card_id'] == null ? undefined : json['card_id'],
        'cardStatus': json['card_status'] == null ? undefined : json['card_status'],
        'dateCreated': json['date_created'] == null ? undefined : (new Date(json['date_created'])),
        '_default': json['default'] == null ? undefined : json['default'],
        'expmonth': json['expmonth'] == null ? undefined : json['expmonth'],
        'expyear': json['expyear'] == null ? undefined : json['expyear'],
        'label': json['label'] == null ? undefined : json['label'],
        'label2': json['label2'] == null ? undefined : json['label2'],
        'last4digits': json['last4digits'] == null ? undefined : json['last4digits'],
        'nameOnCard': json['name_on_card'] == null ? undefined : json['name_on_card'],
        'scheme': json['scheme'] == null ? undefined : json['scheme'],
        'token': json['token'] == null ? undefined : json['token'],
    };
}

export function CardToJSON(value?: Card | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'bin_commercial': value['binCommercial'],
        'bin_corporate': value['binCorporate'],
        'bin_country_issued': value['binCountryIssued'],
        'bin_credit': value['binCredit'],
        'bin_currency': value['binCurrency'],
        'bin_debit': value['binDebit'],
        'bin_description': value['binDescription'],
        'bin_eu': value['binEu'],
        'card_id': value['cardId'],
        'card_status': value['cardStatus'],
        'date_created': value['dateCreated'] == null ? undefined : ((value['dateCreated']).toISOString()),
        'default': value['_default'],
        'expmonth': value['expmonth'],
        'expyear': value['expyear'],
        'label': value['label'],
        'label2': value['label2'],
        'last4digits': value['last4digits'],
        'name_on_card': value['nameOnCard'],
        'scheme': value['scheme'],
        'token': value['token'],
    };
}

