/* tslint:disable */
/* eslint-disable */
/**
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you\'re integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it\'s a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * The version of the OpenAPI document: 6.6.40
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BatchTransactionResultModel
 */
export interface BatchTransactionResultModel {
    /**
     * The card holder account id used for the transaction.
     * @type {string}
     * @memberof BatchTransactionResultModel
     */
    accountId: string;
    /**
     * The identifier of the transaction.
     * @type {string}
     * @memberof BatchTransactionResultModel
     */
    identifier: string;
    /**
     * The merchant id of the transaction.
     * @type {number}
     * @memberof BatchTransactionResultModel
     */
    merchantid: number;
    /**
     * A response message pertaining to the transaction.
     * @type {string}
     * @memberof BatchTransactionResultModel
     */
    message: string;
    /**
     * An integer result that indicates the outcome of the transaction. The Code value below maps to the result value
     * 
     * <table>
     * <tr>
     * <th>Code</th>
     * <th>Abbrev</th>
     * <th>Description</th>
     * </tr>
     * <tr><td>0</td><td>Declined</td><td>Declined</td></tr>
     * <tr><td>1</td><td>Accepted</td><td>Accepted</td></tr>
     * <tr><td>2</td><td>Rejected</td><td>Rejected</td></tr>
     * <tr><td>3</td><td>Not Attempted</td><td>Not Attempted</td></tr>
     * <tr><td>4</td><td>Referred</td><td>Referred</td></tr>
     * <tr><td>5</td><td>PinRetry</td><td>Perform PIN Retry</td></tr>
     * <tr><td>6</td><td>ForSigVer</td><td>Force Signature Verification</td></tr>
     * <tr><td>7</td><td>Hold</td><td>Hold</td></tr>
     * <tr><td>8</td><td>SecErr</td><td>Security Error</td></tr>
     * <tr><td>9</td><td>CallAcq</td><td>Call Acquirer</td></tr>
     * <tr><td>10</td><td>DNH</td><td>Do Not Honour</td></tr>
     * <tr><td>11</td><td>RtnCrd</td><td>Retain Card</td></tr>
     * <tr><td>12</td><td>ExprdCrd</td><td>Expired Card</td></tr>
     * <tr><td>13</td><td>InvldCrd</td><td>Invalid Card No</td></tr>
     * <tr><td>14</td><td>PinExcd</td><td>Pin Tries Exceeded</td></tr>
     * <tr><td>15</td><td>PinInvld</td><td>Pin Invalid</td></tr>
     * <tr><td>16</td><td>AuthReq</td><td>Authentication Required</td></tr>
     * <tr><td>17</td><td>AuthenFail</td><td>Authentication Failed</td></tr>
     * <tr><td>18</td><td>Verified</td><td>Card Verified</td></tr>
     * <tr><td>19</td><td>Cancelled</td><td>Cancelled</td></tr>
     * <tr><td>20</td><td>Un</td><td>Unknown</td></tr>
     * <tr><td>21</td><td>Challenged</td><td>Challenged</td></tr>
     * <tr><td>22</td><td>Decoupled</td><td>Decoupled</td></tr>
     * <tr><td>23</td><td>Denied</td><td>Permission Denied</td></tr>
     * </table>
     * 
     * @type {number}
     * @memberof BatchTransactionResultModel
     */
    result: number;
    /**
     * A result code of the transaction identifying the result of the transaction for success, rejection or decline.
     * @type {string}
     * @memberof BatchTransactionResultModel
     */
    resultCode: string;
    /**
     * The amount of the transaction processed.
     * @type {number}
     * @memberof BatchTransactionResultModel
     */
    amount?: number;
    /**
     * The authorisation code of a successful transaction.
     * @type {string}
     * @memberof BatchTransactionResultModel
     */
    authcode?: string;
    /**
     * The datetime that the transaction was processed.
     * @type {Date}
     * @memberof BatchTransactionResultModel
     */
    datetime?: Date;
    /**
     * A masked value of the card number used for processing displaying limited values that can be used on a receipt.
     * 
     * @type {string}
     * @memberof BatchTransactionResultModel
     */
    maskedpan?: string;
    /**
     * The name of the card scheme of the transaction that processed the transaction such as Visa or MasterCard.
     * 
     * @type {string}
     * @memberof BatchTransactionResultModel
     */
    scheme?: string;
    /**
     * The name of the card scheme of the transaction such as VI or MC.
     * 
     * @type {string}
     * @memberof BatchTransactionResultModel
     */
    schemeId?: string;
    /**
     * A url containing a logo of the card scheme.
     * 
     * @type {string}
     * @memberof BatchTransactionResultModel
     */
    schemeLogo?: string;
    /**
     * The resulting transaction number, ordered incrementally from 1 for every merchant_id. The value will default to less than 1
     * for transactions that do not have a transaction number issued.
     * 
     * @type {number}
     * @memberof BatchTransactionResultModel
     */
    transno?: number;
}

/**
 * Check if a given object implements the BatchTransactionResultModel interface.
 */
export function instanceOfBatchTransactionResultModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accountId" in value;
    isInstance = isInstance && "identifier" in value;
    isInstance = isInstance && "merchantid" in value;
    isInstance = isInstance && "message" in value;
    isInstance = isInstance && "result" in value;
    isInstance = isInstance && "resultCode" in value;

    return isInstance;
}

export function BatchTransactionResultModelFromJSON(json: any): BatchTransactionResultModel {
    return BatchTransactionResultModelFromJSONTyped(json, false);
}

export function BatchTransactionResultModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): BatchTransactionResultModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountId': json['account_id'],
        'identifier': json['identifier'],
        'merchantid': json['merchantid'],
        'message': json['message'],
        'result': json['result'],
        'resultCode': json['result_code'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'authcode': !exists(json, 'authcode') ? undefined : json['authcode'],
        'datetime': !exists(json, 'datetime') ? undefined : (new Date(json['datetime'])),
        'maskedpan': !exists(json, 'maskedpan') ? undefined : json['maskedpan'],
        'scheme': !exists(json, 'scheme') ? undefined : json['scheme'],
        'schemeId': !exists(json, 'scheme_id') ? undefined : json['scheme_id'],
        'schemeLogo': !exists(json, 'scheme_logo') ? undefined : json['scheme_logo'],
        'transno': !exists(json, 'transno') ? undefined : json['transno'],
    };
}

export function BatchTransactionResultModelToJSON(value?: BatchTransactionResultModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'account_id': value.accountId,
        'identifier': value.identifier,
        'merchantid': value.merchantid,
        'message': value.message,
        'result': value.result,
        'result_code': value.resultCode,
        'amount': value.amount,
        'authcode': value.authcode,
        'datetime': value.datetime === undefined ? undefined : (value.datetime.toISOString()),
        'maskedpan': value.maskedpan,
        'scheme': value.scheme,
        'scheme_id': value.schemeId,
        'scheme_logo': value.schemeLogo,
        'transno': value.transno,
    };
}

