/* tslint:disable */
/* eslint-disable */
/**
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you\'re integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it\'s a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * The version of the OpenAPI document: 6.9.3
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AuthReference
 */
export interface AuthReference {
    /**
     * The address of the card holder.
     * @type {string}
     * @memberof AuthReference
     */
    address?: string;
    /**
     * The amount of the transaction in decimal currency format.
     * @type {string}
     * @memberof AuthReference
     */
    amount?: string;
    /**
     * The amount of the transaction in integer/request format.
     * @type {number}
     * @memberof AuthReference
     */
    amountValue?: number;
    /**
     * A reference number provided by the acquiring services.
     * @type {string}
     * @memberof AuthReference
     */
    atrn?: string;
    /**
     * The authorisation code of the transaction returned by the acquirer or card issuer.
     * @type {string}
     * @memberof AuthReference
     */
    authcode?: string;
    /**
     * The authentication result if an ecommerce transaction. 'Y'. Authentication Successful, 'N'. Authentication Failed, 'A'. Attempts Processing Performed, 'U'. Authentication Could Not Be Performed, 'C'. Challenge Required.
     * @type {string}
     * @memberof AuthReference
     */
    authenResult?: string;
    /**
     * A batch number which the transaction has been end of day batched towards.
     * @type {string}
     * @memberof AuthReference
     */
    batchno?: string;
    /**
     * Whether the card is a commercial card.
     * @type {boolean}
     * @memberof AuthReference
     */
    binCommercial?: boolean;
    /**
     * Whether the card is a consumer card.
     * @type {boolean}
     * @memberof AuthReference
     */
    binConsumer?: boolean;
    /**
     * Whether the card is a corporate card.
     * @type {boolean}
     * @memberof AuthReference
     */
    binCorporate?: boolean;
    /**
     * Whether the card is a credit card.
     * @type {boolean}
     * @memberof AuthReference
     */
    binCredit?: boolean;
    /**
     * Whether the card is a debit card.
     * @type {boolean}
     * @memberof AuthReference
     */
    binDebit?: boolean;
    /**
     * Merchant-initiated transactions (MITs) are payments you trigger, where the cardholder has previously consented
     * to you carrying out such payments. These may be scheduled (such as recurring payments and installments) or
     * unscheduled (like account top-ups triggered by balance thresholds and no-show charges).
     * 
     * Scheduled
     * These are regular payments using stored card details, like installments or a monthly subscription fee.
     * 
     * - `I` Instalment - A single purchase of goods or services billed to a cardholder in multiple transactions, over a period of time agreed by the cardholder and you.
     * 
     * - `R` Recurring - Transactions processed at fixed, regular intervals not to exceed one year between transactions, representing an agreement between a cardholder and you to purchase goods or services provided over a period of time.
     * 
     * Unscheduled
     * These are payments using stored card details that do not occur on a regular schedule, like top-ups for a
     * digital wallet triggered by the balance falling below a certain threshold.
     * 
     * - `A` Reauthorisation - a purchase made after the original purchase. A common scenario is delayed/split shipments.
     * 
     * - `C` Unscheduled Payment - A transaction using a stored credential for a fixed or variable amount that does not occur on a scheduled or regularly occurring transaction date. This includes account top-ups triggered by balance thresholds.
     * 
     * - `D` Delayed Charge - A delayed charge is typically used in hotel, cruise lines and vehicle rental environments to perform a supplemental account charge after original services are rendered.
     * 
     * - `L` Incremental - An incremental authorisation is typically found in hotel and car rental environments, where the cardholder has agreed to pay for any service incurred during the duration of the contract. An incremental authorisation is where you need to seek authorisation of further funds in addition to what you have originally requested. A common scenario is additional services charged to the contract, such as extending a stay in a hotel.
     * 
     * - `S` Resubmission - When the original purchase occurred, but you were not able to get authorisation at the time the goods or services were provided. It should be only used where the goods or services have already been provided, but the authorisation request is declined for insufficient funds.
     * 
     * - `X` No-show - A no-show is a transaction where you are enabled to charge for services which the cardholder entered into an agreement to purchase, but the cardholder did not meet the terms of the agreement.
     * 
     * - `N` Not Applicable - For all other transactions the value will be not applicable.
     * 
     * @type {string}
     * @memberof AuthReference
     */
    cardholderAgreement?: string;
    /**
     * The currency of the transaction in ISO 4217 code format.
     * @type {string}
     * @memberof AuthReference
     */
    currency?: string;
    /**
     * The date and time of the transaction.
     * @type {Date}
     * @memberof AuthReference
     */
    datetime?: Date;
    /**
     * The ECI if an ecommerce transaction.
     * @type {string}
     * @memberof AuthReference
     */
    eci?: string;
    /**
     * The email address of the card holder.
     * @type {string}
     * @memberof AuthReference
     */
    email?: string;
    /**
     * The environment that the transaction is process within based on the transaction type.
     * @type {string}
     * @memberof AuthReference
     */
    env?: string;
    /**
     * The identifier of the transaction used to process the transaction.
     * @type {string}
     * @memberof AuthReference
     */
    identifier?: string;
    /**
     * The initiation of the payment. The value will be C for Card holder initiated and M for a merchant initiated transaction.
     * @type {string}
     * @memberof AuthReference
     */
    initiation?: string;
    /**
     * The payment instrument used such as Card, Cash, Bank, Crypto, ApplePay, GooglePay, Click2Pay, PayPal, OpenBankingPayment.
     * @type {string}
     * @memberof AuthReference
     */
    instrument?: string;
    /**
     * A masking of the card number which was used to process the tranasction.
     * @type {string}
     * @memberof AuthReference
     */
    maskedpan?: string;
    /**
     * The merchant id of the transaction result.
     * @type {number}
     * @memberof AuthReference
     */
    merchantid?: number;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof AuthReference
     */
    meta?: { [key: string]: string; };
    /**
     * The name of the card holder.
     * @type {string}
     * @memberof AuthReference
     */
    nameOnCard?: string;
    /**
     * The postcode of the card holder.
     * @type {string}
     * @memberof AuthReference
     */
    postcode?: string;
    /**
     * The result of the transaction.
     * @type {string}
     * @memberof AuthReference
     */
    result?: string;
    /**
     * The id of the result of the transaction.
     * @type {string}
     * @memberof AuthReference
     */
    resultId?: string;
    /**
     * The card scheme of any card used.
     * @type {string}
     * @memberof AuthReference
     */
    scheme?: string;
    /**
     * The card scheme logo of any card used.
     * @type {string}
     * @memberof AuthReference
     */
    schemeLogo?: string;
    /**
     * The current status of the transaction through it's lifecycle.
     * @type {string}
     * @memberof AuthReference
     */
    transStatus?: string;
    /**
     * The type code of transaction that was processed.
     * @type {string}
     * @memberof AuthReference
     */
    transType?: string;
    /**
     * The transaction number of the transaction.
     * @type {number}
     * @memberof AuthReference
     */
    transno?: number;
    /**
     * Defines whether the transaction is a sale, refund or verification.
     * @type {string}
     * @memberof AuthReference
     */
    type?: string;
    /**
     * The date and time of the transaction in UTC milli seconds since the epoc.
     * @type {number}
     * @memberof AuthReference
     */
    utc?: number;
}

/**
 * Check if a given object implements the AuthReference interface.
 */
export function instanceOfAuthReference(value: object): value is AuthReference {
    return true;
}

export function AuthReferenceFromJSON(json: any): AuthReference {
    return AuthReferenceFromJSONTyped(json, false);
}

export function AuthReferenceFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthReference {
    if (json == null) {
        return json;
    }
    return {
        
        'address': json['address'] == null ? undefined : json['address'],
        'amount': json['amount'] == null ? undefined : json['amount'],
        'amountValue': json['amount_value'] == null ? undefined : json['amount_value'],
        'atrn': json['atrn'] == null ? undefined : json['atrn'],
        'authcode': json['authcode'] == null ? undefined : json['authcode'],
        'authenResult': json['authen_result'] == null ? undefined : json['authen_result'],
        'batchno': json['batchno'] == null ? undefined : json['batchno'],
        'binCommercial': json['bin_commercial'] == null ? undefined : json['bin_commercial'],
        'binConsumer': json['bin_consumer'] == null ? undefined : json['bin_consumer'],
        'binCorporate': json['bin_corporate'] == null ? undefined : json['bin_corporate'],
        'binCredit': json['bin_credit'] == null ? undefined : json['bin_credit'],
        'binDebit': json['bin_debit'] == null ? undefined : json['bin_debit'],
        'cardholderAgreement': json['cardholder_agreement'] == null ? undefined : json['cardholder_agreement'],
        'currency': json['currency'] == null ? undefined : json['currency'],
        'datetime': json['datetime'] == null ? undefined : (new Date(json['datetime'])),
        'eci': json['eci'] == null ? undefined : json['eci'],
        'email': json['email'] == null ? undefined : json['email'],
        'env': json['env'] == null ? undefined : json['env'],
        'identifier': json['identifier'] == null ? undefined : json['identifier'],
        'initiation': json['initiation'] == null ? undefined : json['initiation'],
        'instrument': json['instrument'] == null ? undefined : json['instrument'],
        'maskedpan': json['maskedpan'] == null ? undefined : json['maskedpan'],
        'merchantid': json['merchantid'] == null ? undefined : json['merchantid'],
        'meta': json['meta'] == null ? undefined : json['meta'],
        'nameOnCard': json['name_on_card'] == null ? undefined : json['name_on_card'],
        'postcode': json['postcode'] == null ? undefined : json['postcode'],
        'result': json['result'] == null ? undefined : json['result'],
        'resultId': json['result_id'] == null ? undefined : json['result_id'],
        'scheme': json['scheme'] == null ? undefined : json['scheme'],
        'schemeLogo': json['scheme_logo'] == null ? undefined : json['scheme_logo'],
        'transStatus': json['trans_status'] == null ? undefined : json['trans_status'],
        'transType': json['trans_type'] == null ? undefined : json['trans_type'],
        'transno': json['transno'] == null ? undefined : json['transno'],
        'type': json['type'] == null ? undefined : json['type'],
        'utc': json['utc'] == null ? undefined : json['utc'],
    };
}

export function AuthReferenceToJSON(json: any): AuthReference {
    return AuthReferenceToJSONTyped(json, false);
}

export function AuthReferenceToJSONTyped(value?: AuthReference | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'address': value['address'],
        'amount': value['amount'],
        'amount_value': value['amountValue'],
        'atrn': value['atrn'],
        'authcode': value['authcode'],
        'authen_result': value['authenResult'],
        'batchno': value['batchno'],
        'bin_commercial': value['binCommercial'],
        'bin_consumer': value['binConsumer'],
        'bin_corporate': value['binCorporate'],
        'bin_credit': value['binCredit'],
        'bin_debit': value['binDebit'],
        'cardholder_agreement': value['cardholderAgreement'],
        'currency': value['currency'],
        'datetime': value['datetime'] == null ? undefined : ((value['datetime']).toISOString()),
        'eci': value['eci'],
        'email': value['email'],
        'env': value['env'],
        'identifier': value['identifier'],
        'initiation': value['initiation'],
        'instrument': value['instrument'],
        'maskedpan': value['maskedpan'],
        'merchantid': value['merchantid'],
        'meta': value['meta'],
        'name_on_card': value['nameOnCard'],
        'postcode': value['postcode'],
        'result': value['result'],
        'result_id': value['resultId'],
        'scheme': value['scheme'],
        'scheme_logo': value['schemeLogo'],
        'trans_status': value['transStatus'],
        'trans_type': value['transType'],
        'transno': value['transno'],
        'type': value['type'],
        'utc': value['utc'],
    };
}

