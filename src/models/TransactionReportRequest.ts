/* tslint:disable */
/* eslint-disable */
/**
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you\'re integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it\'s a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * The version of the OpenAPI document: 6.9.3
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransactionReportRequest
 */
export interface TransactionReportRequest {
    /**
     * The date and time of transactions from.
     * @type {Date}
     * @memberof TransactionReportRequest
     */
    from: Date;
    /**
     * The merchant id of the transactions to review.
     * @type {number}
     * @memberof TransactionReportRequest
     */
    merchantid: number;
    /**
     * The date and time of transactions until.
     * @type {Date}
     * @memberof TransactionReportRequest
     */
    until: Date;
    /**
     * 
     * @type {Array<string>}
     * @memberof TransactionReportRequest
     */
    fields?: Array<string>;
    /**
     * Include transactions fully authorised in the results.
     * @type {boolean}
     * @memberof TransactionReportRequest
     */
    includeAuthorised?: boolean;
    /**
     * Include transactions that were cancelled in the results.
     * @type {boolean}
     * @memberof TransactionReportRequest
     */
    includeCancelled?: boolean;
    /**
     * Include transactions that were declined or not honoured in the results.
     * @type {boolean}
     * @memberof TransactionReportRequest
     */
    includeDeclined?: boolean;
    /**
     * Include transactions that were rejected due to validation issues.
     * @type {boolean}
     * @memberof TransactionReportRequest
     */
    includeRejected?: boolean;
    /**
     * Includes transactions that were initiated but not completedâ€”e.g. those pending authentication or challenge responses that were never fulfilled.
     * @type {boolean}
     * @memberof TransactionReportRequest
     */
    includeUnfulfilled?: boolean;
    /**
     * The maximum number of results to return in a single response. This value is used to limit the size of data returned by the API, enhancing performance and manageability. Values should be between 5 and 250.
     * @type {number}
     * @memberof TransactionReportRequest
     */
    maxResults?: number;
    /**
     * Defines a preset profile for the level of detail in the returned fields. This simplifies response formatting for common use cases.
     * Available values:
     *  - `basic` (default): Returns a minimal, high-level view with key fields for reporting or dashboards.
     *  - `extended`: Adds fields useful for customer support, settlement analysis, or more in-depth tracking, while still omitting sensitive personal or low-level fields.
     *  - `full`: Returns all available transaction fields, including internal flags, personal data (where applicable), and detailed metadata. Use with care.
     * 
     * @type {string}
     * @memberof TransactionReportRequest
     */
    mode?: string;
    /**
     * A token that identifies the starting point of the page of results to be returned. An empty value indicates the start of the dataset. When supplied, it is validated and used to fetch the subsequent page of results. This token is typically obtained from the response of a previous pagination request.
     * @type {string}
     * @memberof TransactionReportRequest
     */
    nextToken?: string;
    /**
     * Specifies the field by which results are ordered. Available fields are [trans_no,date_when,amount]. By default, fields are ordered by OrderByExpression(trans_no,ASC). To order in descending order, prefix with '-' or suffix with ' DESC'.
     * @type {string}
     * @memberof TransactionReportRequest
     */
    orderBy?: string;
    /**
     * Defines whether personal identifiable information is masked which it is by default.
     * @type {boolean}
     * @memberof TransactionReportRequest
     */
    piiMasked?: boolean;
    /**
     * Include refunds in the results.
     * @type {boolean}
     * @memberof TransactionReportRequest
     */
    typeRefund?: boolean;
    /**
     * Include sales in the results.
     * @type {boolean}
     * @memberof TransactionReportRequest
     */
    typeSale?: boolean;
    /**
     * Include verifications in the results.
     * @type {boolean}
     * @memberof TransactionReportRequest
     */
    typeVerify?: boolean;
}

/**
 * Check if a given object implements the TransactionReportRequest interface.
 */
export function instanceOfTransactionReportRequest(value: object): value is TransactionReportRequest {
    if (!('from' in value) || value['from'] === undefined) return false;
    if (!('merchantid' in value) || value['merchantid'] === undefined) return false;
    if (!('until' in value) || value['until'] === undefined) return false;
    return true;
}

export function TransactionReportRequestFromJSON(json: any): TransactionReportRequest {
    return TransactionReportRequestFromJSONTyped(json, false);
}

export function TransactionReportRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionReportRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'from': (new Date(json['from'])),
        'merchantid': json['merchantid'],
        'until': (new Date(json['until'])),
        'fields': json['fields'] == null ? undefined : json['fields'],
        'includeAuthorised': json['include_authorised'] == null ? undefined : json['include_authorised'],
        'includeCancelled': json['include_cancelled'] == null ? undefined : json['include_cancelled'],
        'includeDeclined': json['include_declined'] == null ? undefined : json['include_declined'],
        'includeRejected': json['include_rejected'] == null ? undefined : json['include_rejected'],
        'includeUnfulfilled': json['include_unfulfilled'] == null ? undefined : json['include_unfulfilled'],
        'maxResults': json['maxResults'] == null ? undefined : json['maxResults'],
        'mode': json['mode'] == null ? undefined : json['mode'],
        'nextToken': json['nextToken'] == null ? undefined : json['nextToken'],
        'orderBy': json['orderBy'] == null ? undefined : json['orderBy'],
        'piiMasked': json['pii_masked'] == null ? undefined : json['pii_masked'],
        'typeRefund': json['type_refund'] == null ? undefined : json['type_refund'],
        'typeSale': json['type_sale'] == null ? undefined : json['type_sale'],
        'typeVerify': json['type_verify'] == null ? undefined : json['type_verify'],
    };
}

export function TransactionReportRequestToJSON(json: any): TransactionReportRequest {
    return TransactionReportRequestToJSONTyped(json, false);
}

export function TransactionReportRequestToJSONTyped(value?: TransactionReportRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'from': ((value['from']).toISOString()),
        'merchantid': value['merchantid'],
        'until': ((value['until']).toISOString()),
        'fields': value['fields'],
        'include_authorised': value['includeAuthorised'],
        'include_cancelled': value['includeCancelled'],
        'include_declined': value['includeDeclined'],
        'include_rejected': value['includeRejected'],
        'include_unfulfilled': value['includeUnfulfilled'],
        'maxResults': value['maxResults'],
        'mode': value['mode'],
        'nextToken': value['nextToken'],
        'orderBy': value['orderBy'],
        'pii_masked': value['piiMasked'],
        'type_refund': value['typeRefund'],
        'type_sale': value['typeSale'],
        'type_verify': value['typeVerify'],
    };
}

