/* tslint:disable */
/* eslint-disable */
/**
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you\'re integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it\'s a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * The version of the OpenAPI document: 6.6.40
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PaylinkStateEvent } from './PaylinkStateEvent';
import {
    PaylinkStateEventFromJSON,
    PaylinkStateEventFromJSONTyped,
    PaylinkStateEventToJSON,
} from './PaylinkStateEvent';

/**
 * 
 * @export
 * @interface PaylinkTokenStatus
 */
export interface PaylinkTokenStatus {
    /**
     * the amount that has been paid against the session.
     * @type {number}
     * @memberof PaylinkTokenStatus
     */
    amountPaid?: number;
    /**
     * an authorisation code if the transaction was processed and isPaid is true.
     * @type {string}
     * @memberof PaylinkTokenStatus
     */
    authCode?: string;
    /**
     * a description of the card that was used for payment if paid.
     * @type {string}
     * @memberof PaylinkTokenStatus
     */
    card?: string;
    /**
     * the date and time that the session was created.
     * @type {Date}
     * @memberof PaylinkTokenStatus
     */
    created?: Date;
    /**
     * the date and time of the current status.
     * @type {Date}
     * @memberof PaylinkTokenStatus
     */
    datetime?: Date;
    /**
     * the merchant identifier, to help identifying the token.
     * @type {string}
     * @memberof PaylinkTokenStatus
     */
    identifier?: string;
    /**
     * true if an attachment exists.
     * @type {boolean}
     * @memberof PaylinkTokenStatus
     */
    isAttachment?: boolean;
    /**
     * true if the session was cancelled either by the user or by a system request.
     * @type {boolean}
     * @memberof PaylinkTokenStatus
     */
    isCancelled?: boolean;
    /**
     * true if the token has been closed.
     * @type {boolean}
     * @memberof PaylinkTokenStatus
     */
    isClosed?: boolean;
    /**
     * true if a customer receipt has been sent.
     * @type {boolean}
     * @memberof PaylinkTokenStatus
     */
    isCustomerReceiptEmailSent?: boolean;
    /**
     * true if an email was sent.
     * @type {boolean}
     * @memberof PaylinkTokenStatus
     */
    isEmailSent?: boolean;
    /**
     * true if the session has expired.
     * @type {boolean}
     * @memberof PaylinkTokenStatus
     */
    isExpired?: boolean;
    /**
     * true if the form was ever displayed to the addressee.
     * @type {boolean}
     * @memberof PaylinkTokenStatus
     */
    isFormViewed?: boolean;
    /**
     * true if a merchant notification receipt was sent.
     * @type {boolean}
     * @memberof PaylinkTokenStatus
     */
    isMerchantNotificationEmailSent?: boolean;
    /**
     * true if the session is still open for payment or false if it has been closed.
     * @type {boolean}
     * @memberof PaylinkTokenStatus
     */
    isOpenForPayment?: boolean;
    /**
     * whether the session has been paid and therefore can be considered as complete.
     * @type {boolean}
     * @memberof PaylinkTokenStatus
     */
    isPaid?: boolean;
    /**
     * true if payment has been attempted.
     * @type {boolean}
     * @memberof PaylinkTokenStatus
     */
    isPaymentAttempted?: boolean;
    /**
     * true if a post back was executed successfully.
     * @type {boolean}
     * @memberof PaylinkTokenStatus
     */
    isPostbackOk?: boolean;
    /**
     * true if the request has been challenged using 3-D Secure.
     * @type {boolean}
     * @memberof PaylinkTokenStatus
     */
    isRequestChallenged?: boolean;
    /**
     * true if an SMS was sent.
     * @type {boolean}
     * @memberof PaylinkTokenStatus
     */
    isSmsSent?: boolean;
    /**
     * whether the token generation was successfully validated.
     * @type {boolean}
     * @memberof PaylinkTokenStatus
     */
    isValidated?: boolean;
    /**
     * the date and time that the session last had an event actioned against it.
     * @type {Date}
     * @memberof PaylinkTokenStatus
     */
    lastEventDateTime?: Date;
    /**
     * the result of the last payment if one exists.
     * @type {string}
     * @memberof PaylinkTokenStatus
     */
    lastPaymentResult?: string;
    /**
     * identifies the merchant account.
     * @type {number}
     * @memberof PaylinkTokenStatus
     */
    mid?: number;
    /**
     * the number of attempts made to pay.
     * @type {number}
     * @memberof PaylinkTokenStatus
     */
    paymentAttemptsCount?: number;
    /**
     * 
     * @type {Array<PaylinkStateEvent>}
     * @memberof PaylinkTokenStatus
     */
    stateHistory?: Array<PaylinkStateEvent>;
    /**
     * the token value which uniquely identifies the session.
     * @type {string}
     * @memberof PaylinkTokenStatus
     */
    token?: string;
    /**
     * a transaction number if the transacstion was processed and isPaid is true.
     * @type {number}
     * @memberof PaylinkTokenStatus
     */
    transNo?: number;
}

/**
 * Check if a given object implements the PaylinkTokenStatus interface.
 */
export function instanceOfPaylinkTokenStatus(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PaylinkTokenStatusFromJSON(json: any): PaylinkTokenStatus {
    return PaylinkTokenStatusFromJSONTyped(json, false);
}

export function PaylinkTokenStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaylinkTokenStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amountPaid': !exists(json, 'amount_paid') ? undefined : json['amount_paid'],
        'authCode': !exists(json, 'auth_code') ? undefined : json['auth_code'],
        'card': !exists(json, 'card') ? undefined : json['card'],
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'datetime': !exists(json, 'datetime') ? undefined : (new Date(json['datetime'])),
        'identifier': !exists(json, 'identifier') ? undefined : json['identifier'],
        'isAttachment': !exists(json, 'is_attachment') ? undefined : json['is_attachment'],
        'isCancelled': !exists(json, 'is_cancelled') ? undefined : json['is_cancelled'],
        'isClosed': !exists(json, 'is_closed') ? undefined : json['is_closed'],
        'isCustomerReceiptEmailSent': !exists(json, 'is_customer_receipt_email_sent') ? undefined : json['is_customer_receipt_email_sent'],
        'isEmailSent': !exists(json, 'is_email_sent') ? undefined : json['is_email_sent'],
        'isExpired': !exists(json, 'is_expired') ? undefined : json['is_expired'],
        'isFormViewed': !exists(json, 'is_form_viewed') ? undefined : json['is_form_viewed'],
        'isMerchantNotificationEmailSent': !exists(json, 'is_merchant_notification_email_sent') ? undefined : json['is_merchant_notification_email_sent'],
        'isOpenForPayment': !exists(json, 'is_open_for_payment') ? undefined : json['is_open_for_payment'],
        'isPaid': !exists(json, 'is_paid') ? undefined : json['is_paid'],
        'isPaymentAttempted': !exists(json, 'is_payment_attempted') ? undefined : json['is_payment_attempted'],
        'isPostbackOk': !exists(json, 'is_postback_ok') ? undefined : json['is_postback_ok'],
        'isRequestChallenged': !exists(json, 'is_request_challenged') ? undefined : json['is_request_challenged'],
        'isSmsSent': !exists(json, 'is_sms_sent') ? undefined : json['is_sms_sent'],
        'isValidated': !exists(json, 'is_validated') ? undefined : json['is_validated'],
        'lastEventDateTime': !exists(json, 'last_event_date_time') ? undefined : (new Date(json['last_event_date_time'])),
        'lastPaymentResult': !exists(json, 'last_payment_result') ? undefined : json['last_payment_result'],
        'mid': !exists(json, 'mid') ? undefined : json['mid'],
        'paymentAttemptsCount': !exists(json, 'payment_attempts_count') ? undefined : json['payment_attempts_count'],
        'stateHistory': !exists(json, 'state_history') ? undefined : ((json['state_history'] as Array<any>).map(PaylinkStateEventFromJSON)),
        'token': !exists(json, 'token') ? undefined : json['token'],
        'transNo': !exists(json, 'trans_no') ? undefined : json['trans_no'],
    };
}

export function PaylinkTokenStatusToJSON(value?: PaylinkTokenStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount_paid': value.amountPaid,
        'auth_code': value.authCode,
        'card': value.card,
        'created': value.created === undefined ? undefined : (value.created.toISOString()),
        'datetime': value.datetime === undefined ? undefined : (value.datetime.toISOString()),
        'identifier': value.identifier,
        'is_attachment': value.isAttachment,
        'is_cancelled': value.isCancelled,
        'is_closed': value.isClosed,
        'is_customer_receipt_email_sent': value.isCustomerReceiptEmailSent,
        'is_email_sent': value.isEmailSent,
        'is_expired': value.isExpired,
        'is_form_viewed': value.isFormViewed,
        'is_merchant_notification_email_sent': value.isMerchantNotificationEmailSent,
        'is_open_for_payment': value.isOpenForPayment,
        'is_paid': value.isPaid,
        'is_payment_attempted': value.isPaymentAttempted,
        'is_postback_ok': value.isPostbackOk,
        'is_request_challenged': value.isRequestChallenged,
        'is_sms_sent': value.isSmsSent,
        'is_validated': value.isValidated,
        'last_event_date_time': value.lastEventDateTime === undefined ? undefined : (value.lastEventDateTime.toISOString()),
        'last_payment_result': value.lastPaymentResult,
        'mid': value.mid,
        'payment_attempts_count': value.paymentAttemptsCount,
        'state_history': value.stateHistory === undefined ? undefined : ((value.stateHistory as Array<any>).map(PaylinkStateEventToJSON)),
        'token': value.token,
        'trans_no': value.transNo,
    };
}

