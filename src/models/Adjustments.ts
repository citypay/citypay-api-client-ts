/* tslint:disable */
/* eslint-disable */
/**
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you\'re integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it\'s a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * The version of the OpenAPI document: 6.9.3
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AdjustmentCondition } from './AdjustmentCondition';
import {
    AdjustmentConditionFromJSON,
    AdjustmentConditionFromJSONTyped,
    AdjustmentConditionToJSON,
    AdjustmentConditionToJSONTyped,
} from './AdjustmentCondition';

/**
 * 
 * @export
 * @interface Adjustments
 */
export interface Adjustments {
    /**
     * The type of adjustment, valid values are `surcharge` or `discount`.
     * @type {string}
     * @memberof Adjustments
     */
    adjustment: string;
    /**
     * How adjustments are accumulated and therefore applied.
     * 
     * **None (Default)**:
     * Only the last applicable adjustment is applied. The system ignores previous adjustments, and only the effect of the final adjustment is considered.
     * Use Case: Use this mode when you want the final transaction amount to reflect only the last adjustment in the sequence, without any cumulative effect from prior adjustments.
     * 
     * **AccumulateBase**:
     * Applies each adjustment independently to the original base amount of the transaction, regardless of any previous adjustments. The effects of all adjustments are then combined to produce the final amount.
     * Use Case: This mode is useful when each adjustment should be applied as if it were the only adjustment, but their effects are accumulated together.
     * 
     * **AccumulatePrevious**:
     * Applies each adjustment sequentially based on the amount resulting from the previous adjustment. This creates a cumulative effect where each adjustment builds upon the last one.
     * Use Case: This mode is ideal when you need the final amount to reflect the cumulative effect of all adjustments in the order they are applied.
     * 
     * **AccumulateBaseOver**:
     * The AccumulateBaseOver mode compares the effect of applying an adjustment to the original base amount with the result of the previously accumulated adjustments. The system then applies whichever adjustment produces a greater final amount.
     * Use Case: This mode is useful when you want to ensure that the most impactful adjustment is applied, whether it comes from the base or the accumulated amount.
     * 
     * @type {string}
     * @memberof Adjustments
     */
    accumulate?: string;
    /**
     * For fixed-amount adjustments, an amount to be discounted or surcharged.
     * @type {number}
     * @memberof Adjustments
     */
    amount?: number;
    /**
     * 
     * @type {AdjustmentCondition}
     * @memberof Adjustments
     */
    conditions?: AdjustmentCondition;
    /**
     * A brief description of the adjustment, explaining its purpose or the conditions under which it is applied.
     * For example.
     * - Late Payment Fee
     * - Â£15 fee for expedited processing on the same day
     * - 5% discount for payments made within 5 days
     * - 15% discount for first-time customers
     * - 10% discount for loyalty program members.
     * 
     * @type {string}
     * @memberof Adjustments
     */
    description?: string;
    /**
     * For percentage-based adjustments, the percentage amount to be discounted or surcharged.
     * @type {number}
     * @memberof Adjustments
     */
    percentage?: number;
}

/**
 * Check if a given object implements the Adjustments interface.
 */
export function instanceOfAdjustments(value: object): value is Adjustments {
    if (!('adjustment' in value) || value['adjustment'] === undefined) return false;
    return true;
}

export function AdjustmentsFromJSON(json: any): Adjustments {
    return AdjustmentsFromJSONTyped(json, false);
}

export function AdjustmentsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Adjustments {
    if (json == null) {
        return json;
    }
    return {
        
        'adjustment': json['adjustment'],
        'accumulate': json['accumulate'] == null ? undefined : json['accumulate'],
        'amount': json['amount'] == null ? undefined : json['amount'],
        'conditions': json['conditions'] == null ? undefined : AdjustmentConditionFromJSON(json['conditions']),
        'description': json['description'] == null ? undefined : json['description'],
        'percentage': json['percentage'] == null ? undefined : json['percentage'],
    };
}

export function AdjustmentsToJSON(json: any): Adjustments {
    return AdjustmentsToJSONTyped(json, false);
}

export function AdjustmentsToJSONTyped(value?: Adjustments | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'adjustment': value['adjustment'],
        'accumulate': value['accumulate'],
        'amount': value['amount'],
        'conditions': AdjustmentConditionToJSON(value['conditions']),
        'description': value['description'],
        'percentage': value['percentage'],
    };
}

