/* tslint:disable */
/* eslint-disable */
/**
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you\'re integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it\'s a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * The version of the OpenAPI document: 6.6.40
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PaylinkCustomParam } from './PaylinkCustomParam';
import {
    PaylinkCustomParamFromJSON,
    PaylinkCustomParamFromJSONTyped,
    PaylinkCustomParamToJSON,
} from './PaylinkCustomParam';
import type { PaylinkFieldGuardModel } from './PaylinkFieldGuardModel';
import {
    PaylinkFieldGuardModelFromJSON,
    PaylinkFieldGuardModelFromJSONTyped,
    PaylinkFieldGuardModelToJSON,
} from './PaylinkFieldGuardModel';
import type { PaylinkPartPayments } from './PaylinkPartPayments';
import {
    PaylinkPartPaymentsFromJSON,
    PaylinkPartPaymentsFromJSONTyped,
    PaylinkPartPaymentsToJSON,
} from './PaylinkPartPayments';
import type { PaylinkUI } from './PaylinkUI';
import {
    PaylinkUIFromJSON,
    PaylinkUIFromJSONTyped,
    PaylinkUIToJSON,
} from './PaylinkUI';

/**
 * 
 * @export
 * @interface PaylinkConfig
 */
export interface PaylinkConfig {
    /**
     * Specifies the approach to be adopted by the Paylink form when displaying a 3-D Secure challenge window. The values may be
     *  iframe: shows the 3-D Secure ACS in an iframe dialog, neatly embedding it in Paylink. This provides a more seamless flow for the cardholder who is able to validate and authenticate their card using a dialog provided by their card issuer.
     *  inline: an inline mode transfers the full browser window to the authentication server, allowing the payment cardholder to see their payment card issuer's URL and the certificate status in the browser.
     * If you request an iframe mode and the browser width is deemed as being small (< 768px) then an inline mode will be enforced. This is to ensure that mobile users have an improved user experience.
     * 
     * @type {string}
     * @memberof PaylinkConfig
     */
    acsMode?: string;
    /**
     * 
     * @type {Array<PaylinkCustomParam>}
     * @memberof PaylinkConfig
     */
    customParams?: Array<PaylinkCustomParam>;
    /**
     * Directly specify the merchant descriptor used for the transaction to be displayed on the payment page.
     * @type {string}
     * @memberof PaylinkConfig
     */
    descriptor?: string;
    /**
     * Specifies a period of time in seconds after which the token cannot be used. A value of 0 defines that the token will never expire. The API will convert an expiry time based on a string value. For instance:
     *   s - Time in seconds, for example 90s.
     *   m - Time in minutes, for example 20m.
     *   h - Time in hours, for example 4h.
     *   w - Time in weeks, for example 4w.
     *   M - Time in months, for example 6M.
     *   y - Time in years, for example 1y.
     *   Defaults to 30 minutes.
     * 
     * @type {string}
     * @memberof PaylinkConfig
     */
    expireIn?: string;
    /**
     * 
     * @type {Array<PaylinkFieldGuardModel>}
     * @memberof PaylinkConfig
     */
    fieldGuard?: Array<PaylinkFieldGuardModel>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PaylinkConfig
     */
    lockParams?: Array<string>;
    /**
     * A URL of a logo to include in the form. The URL should be delivered using HTTPS.
     * @type {string}
     * @memberof PaylinkConfig
     */
    merchLogo?: string;
    /**
     * A URL of the merchant terms and conditions for payment. If a value is supplied, a checkbox will be required to be completed to confirm that the cardholder agrees to these conditions before payment. A modal dialogue is displayed with the content of the conditions displayed.
     * @type {string}
     * @memberof PaylinkConfig
     */
    merchTerms?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PaylinkConfig
     */
    options?: Array<string>;
    /**
     * 
     * @type {PaylinkPartPayments}
     * @memberof PaylinkConfig
     */
    partPayments?: PaylinkPartPayments;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PaylinkConfig
     */
    passThroughData?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PaylinkConfig
     */
    passThroughHeaders?: { [key: string]: string; };
    /**
     * Specifies a URL to use for a call back when the payment is completed. see Postback Handling }.
     * @type {string}
     * @memberof PaylinkConfig
     */
    postback?: string;
    /**
     * A password to be added to the postback for HTTP Basic Authentication.
     * @type {string}
     * @memberof PaylinkConfig
     */
    postbackPassword?: string;
    /**
     * The policy setting for the postback see Postback Handling.
     * @type {string}
     * @memberof PaylinkConfig
     */
    postbackPolicy?: string;
    /**
     * A username to be added to the postback for HTTP Basic Authentication.
     * @type {string}
     * @memberof PaylinkConfig
     */
    postbackUsername?: string;
    /**
     * A value which can delay the redirection in seconds. A value of 0 will redirect immediately.
     * @type {number}
     * @memberof PaylinkConfig
     */
    redirectDelay?: number;
    /**
     * A URL which the browser is redirected to on non-completion of a transaction.
     * @type {string}
     * @memberof PaylinkConfig
     */
    redirectFailure?: string;
    /**
     * A URL which the browser is redirected to on authorisation of a transaction.
     * @type {string}
     * @memberof PaylinkConfig
     */
    redirectSuccess?: string;
    /**
     * The Paylink renderer engine to use.
     * @type {string}
     * @memberof PaylinkConfig
     */
    renderer?: string;
    /**
     * If a value of true is specified, any redirection will include the transaction result in parameters. It is recommended to use the postback integration rather than redirection parameters.
     * @type {boolean}
     * @memberof PaylinkConfig
     */
    returnParams?: boolean;
    /**
     * 
     * @type {PaylinkUI}
     * @memberof PaylinkConfig
     */
    ui?: PaylinkUI;
}

/**
 * Check if a given object implements the PaylinkConfig interface.
 */
export function instanceOfPaylinkConfig(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PaylinkConfigFromJSON(json: any): PaylinkConfig {
    return PaylinkConfigFromJSONTyped(json, false);
}

export function PaylinkConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaylinkConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'acsMode': !exists(json, 'acs_mode') ? undefined : json['acs_mode'],
        'customParams': !exists(json, 'custom_params') ? undefined : ((json['custom_params'] as Array<any>).map(PaylinkCustomParamFromJSON)),
        'descriptor': !exists(json, 'descriptor') ? undefined : json['descriptor'],
        'expireIn': !exists(json, 'expire_in') ? undefined : json['expire_in'],
        'fieldGuard': !exists(json, 'field_guard') ? undefined : ((json['field_guard'] as Array<any>).map(PaylinkFieldGuardModelFromJSON)),
        'lockParams': !exists(json, 'lock_params') ? undefined : json['lock_params'],
        'merchLogo': !exists(json, 'merch_logo') ? undefined : json['merch_logo'],
        'merchTerms': !exists(json, 'merch_terms') ? undefined : json['merch_terms'],
        'options': !exists(json, 'options') ? undefined : json['options'],
        'partPayments': !exists(json, 'part_payments') ? undefined : PaylinkPartPaymentsFromJSON(json['part_payments']),
        'passThroughData': !exists(json, 'pass_through_data') ? undefined : json['pass_through_data'],
        'passThroughHeaders': !exists(json, 'pass_through_headers') ? undefined : json['pass_through_headers'],
        'postback': !exists(json, 'postback') ? undefined : json['postback'],
        'postbackPassword': !exists(json, 'postback_password') ? undefined : json['postback_password'],
        'postbackPolicy': !exists(json, 'postback_policy') ? undefined : json['postback_policy'],
        'postbackUsername': !exists(json, 'postback_username') ? undefined : json['postback_username'],
        'redirectDelay': !exists(json, 'redirect_delay') ? undefined : json['redirect_delay'],
        'redirectFailure': !exists(json, 'redirect_failure') ? undefined : json['redirect_failure'],
        'redirectSuccess': !exists(json, 'redirect_success') ? undefined : json['redirect_success'],
        'renderer': !exists(json, 'renderer') ? undefined : json['renderer'],
        'returnParams': !exists(json, 'return_params') ? undefined : json['return_params'],
        'ui': !exists(json, 'ui') ? undefined : PaylinkUIFromJSON(json['ui']),
    };
}

export function PaylinkConfigToJSON(value?: PaylinkConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'acs_mode': value.acsMode,
        'custom_params': value.customParams === undefined ? undefined : ((value.customParams as Array<any>).map(PaylinkCustomParamToJSON)),
        'descriptor': value.descriptor,
        'expire_in': value.expireIn,
        'field_guard': value.fieldGuard === undefined ? undefined : ((value.fieldGuard as Array<any>).map(PaylinkFieldGuardModelToJSON)),
        'lock_params': value.lockParams,
        'merch_logo': value.merchLogo,
        'merch_terms': value.merchTerms,
        'options': value.options,
        'part_payments': PaylinkPartPaymentsToJSON(value.partPayments),
        'pass_through_data': value.passThroughData,
        'pass_through_headers': value.passThroughHeaders,
        'postback': value.postback,
        'postback_password': value.postbackPassword,
        'postback_policy': value.postbackPolicy,
        'postback_username': value.postbackUsername,
        'redirect_delay': value.redirectDelay,
        'redirect_failure': value.redirectFailure,
        'redirect_success': value.redirectSuccess,
        'renderer': value.renderer,
        'return_params': value.returnParams,
        'ui': PaylinkUIToJSON(value.ui),
    };
}

