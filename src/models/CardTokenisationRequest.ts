/* tslint:disable */
/* eslint-disable */
/**
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you\'re integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it\'s a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * The version of the OpenAPI document: 6.9.3
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CardTokenisationRequest
 */
export interface CardTokenisationRequest {
    /**
     * The card number (PAN) with a variable length to a maximum of 21 digits in numerical form.
     * Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the
     * provided value.
     * 
     * The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.
     *  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.
     * 
     * When providing the card number to our gateway through the authorisation API you will be handling the card data on
     * your application. This will require further PCI controls to be in place and this value must never be stored.
     * 
     * @type {string}
     * @memberof CardTokenisationRequest
     */
    cardnumber?: string;
    /**
     * The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card
     * (American Express has it on the front). The value helps to identify possession of the card as it is not
     * available within the chip or magnetic swipe.
     * 
     * When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped
     * out by any integer parsing.
     * 
     * The CSC number aids fraud prevention in Mail Order and Internet payments.
     * 
     * Business rules are available on your account to identify whether to accept
     * or decline transactions based on mismatched results of the CSC.
     * 
     * The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.
     * 
     * This applies to all entities handling card data.
     * 
     * It should also not be used in any hashing process.
     * 
     * CityPay do not store the value and have no method of retrieving the value once the transaction has been processed.
     * For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.
     * 
     * @type {string}
     * @memberof CardTokenisationRequest
     */
    csc?: string;
    /**
     * The month of expiry of the card. The month value should be a numerical value between 1 and 12.
     * 
     * @type {number}
     * @memberof CardTokenisationRequest
     */
    expmonth?: number;
    /**
     * The year of expiry of the card.
     * 
     * @type {number}
     * @memberof CardTokenisationRequest
     */
    expyear?: number;
    /**
     * The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.
     * 
     * @type {string}
     * @memberof CardTokenisationRequest
     */
    nameOnCard?: string;
    /**
     * A uuid for the session. The value tracks through 3ds session and therefore should be a valid v4 uuid.
     * @type {string}
     * @memberof CardTokenisationRequest
     */
    uuid?: string;
}

/**
 * Check if a given object implements the CardTokenisationRequest interface.
 */
export function instanceOfCardTokenisationRequest(value: object): value is CardTokenisationRequest {
    return true;
}

export function CardTokenisationRequestFromJSON(json: any): CardTokenisationRequest {
    return CardTokenisationRequestFromJSONTyped(json, false);
}

export function CardTokenisationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CardTokenisationRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'cardnumber': json['cardnumber'] == null ? undefined : json['cardnumber'],
        'csc': json['csc'] == null ? undefined : json['csc'],
        'expmonth': json['expmonth'] == null ? undefined : json['expmonth'],
        'expyear': json['expyear'] == null ? undefined : json['expyear'],
        'nameOnCard': json['name_on_card'] == null ? undefined : json['name_on_card'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
    };
}

export function CardTokenisationRequestToJSON(json: any): CardTokenisationRequest {
    return CardTokenisationRequestToJSONTyped(json, false);
}

export function CardTokenisationRequestToJSONTyped(value?: CardTokenisationRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'cardnumber': value['cardnumber'],
        'csc': value['csc'],
        'expmonth': value['expmonth'],
        'expyear': value['expyear'],
        'name_on_card': value['nameOnCard'],
        'uuid': value['uuid'],
    };
}

