/* tslint:disable */
/* eslint-disable */
/**
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you\'re integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it\'s a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * The version of the OpenAPI document: 6.9.3
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PaylinkCustomParam
 */
export interface PaylinkCustomParam {
    /**
     * Refers to the rendered HTML form element name. The value of this field is used in the postback and redirect dataset.
     * @type {string}
     * @memberof PaylinkCustomParam
     */
    name: string;
    /**
     * Determines if the custom parameter is stored as meta data against an authorisation allowing for that authorisation to be searched and queried by the result of this value. Defaults to false.
     * @type {boolean}
     * @memberof PaylinkCustomParam
     */
    authMetaData?: boolean;
    /**
     * The type of entry mode. A value of `pre` will pre-render the custom parameter before the payment screen. Any other value will result in the custom parameter being displayed on the payment screen.
     * @type {string}
     * @memberof PaylinkCustomParam
     */
    entryMode?: string;
    /**
     * The type of html field, defaulting to `text`. Options are:
     * 
     *  - `dob`      A date of birth field as a series of select list entries
     *  - `text`     Allows the user to enter any text.
     *  - `password` A field where the characters are masked to protect the input, typically used for passwords.
     *  - `email`    Used for input fields that should contain an email address.
     *  - `number`   For numeric input, can include controls for incrementing or decrementing the number.
     *  - `tel`      For telephone numbers.
     *  - `url`      A text field for entering a URL.
     *  - `hidden`   Not visible to the user, but its value is sent when the form is submitted.
     *  - `checkbox` A check box allowing single values to be selected/deselected.
     *  - `radio`    Allows the user to select one of a limited number of choices.
     *  - `select`   Renders as select items
     * 
     * Select Options:
     * 
     * Select options are constructed by providing a list of values in the value custom parameter field.
     * Each value is delimited by a pipe character `|`.
     * Value items can also be delimited with `:` as a value label pair.
     * 
     * For instance, a sports club requires identifying it's age group for membership entry:
     * 
     * <CodeGroup title="Select Examples" label="ProcessBatchRequest">
     *    ```json {{ title: 'Basic Values' }}
     *      { "label" : "Age Group",
     *        "fieldType": "select",
     *        "value" : "Under 18|18-30|30-50|50+" }...
     * 
     *      <select>
     *          <option value="Under 18">Under 18</option>
     *          <option value="18-30">18-30</option>
     *          <option value="30-50">30-50</option>
     *          <option value="50+">50+</option>
     *      </select>
     *    ```
     *    ```json {{ title: 'Label and Values' }}
     *      { "label" : "Age Group",
     *        "fieldType": "select",
     *        "value" : "0:Under 18|1:18-30|2:30-50|3:50+" }...
     * 
     *      <select>
     *          <option value="0">Under 18</option>
     *          <option value="1">18-30</option>
     *          <option value="2">30-50</option>
     *          <option value="3">50+</option>
     *      </select>
     *    ```
     * </CodeGroup>
     * 
     * Fields may be requested as optional. If a select is required to be optional, provide a value such as
     * `:Select an Option|options...` at the front of the list.
     * 
     * @type {string}
     * @memberof PaylinkCustomParam
     */
    fieldType?: string;
    /**
     * A value which groups items for layout. The value should be a string title for rendering such as "Your Account Info". If no value is provided, the parameter is added to a default parameter group. Group names are ordered alphabetically when rendered.
     * @type {string}
     * @memberof PaylinkCustomParam
     */
    group?: string;
    /**
     * A label to show alongside the input. If this value is not supplied, the name value will be used.
     * @type {string}
     * @memberof PaylinkCustomParam
     */
    label?: string;
    /**
     * States whether the field is locked, preventing entry or amendment by the person completing the form.
     * @type {boolean}
     * @memberof PaylinkCustomParam
     */
    locked?: boolean;
    /**
     * A value which allows you to order the position of elements in a grouping. Values will order in ascending order. Negative values are possible.
     * @type {number}
     * @memberof PaylinkCustomParam
     */
    order?: number;
    /**
     * A string value which specifies the validation logic of the form element, for example a value of QA[0-9]{3,4} will require a value such as QA221 or QA4433.
     * @type {string}
     * @memberof PaylinkCustomParam
     */
    pattern?: string;
    /**
     * A value to set as the placeholder attribute which will render in the browser.
     * @type {string}
     * @memberof PaylinkCustomParam
     */
    placeholder?: string;
    /**
     * A boolean value that states whether the field is required or optional. When an element is required, validation will be performed on the end user's input form.
     * @type {boolean}
     * @memberof PaylinkCustomParam
     */
    required?: boolean;
    /**
     * An initial value for the parameter as it appears on the Form. If your parameter is hidden, the value will be required.
     * @type {string}
     * @memberof PaylinkCustomParam
     */
    value?: string;
}

/**
 * Check if a given object implements the PaylinkCustomParam interface.
 */
export function instanceOfPaylinkCustomParam(value: object): value is PaylinkCustomParam {
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function PaylinkCustomParamFromJSON(json: any): PaylinkCustomParam {
    return PaylinkCustomParamFromJSONTyped(json, false);
}

export function PaylinkCustomParamFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaylinkCustomParam {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'authMetaData': json['auth_meta_data'] == null ? undefined : json['auth_meta_data'],
        'entryMode': json['entry_mode'] == null ? undefined : json['entry_mode'],
        'fieldType': json['field_type'] == null ? undefined : json['field_type'],
        'group': json['group'] == null ? undefined : json['group'],
        'label': json['label'] == null ? undefined : json['label'],
        'locked': json['locked'] == null ? undefined : json['locked'],
        'order': json['order'] == null ? undefined : json['order'],
        'pattern': json['pattern'] == null ? undefined : json['pattern'],
        'placeholder': json['placeholder'] == null ? undefined : json['placeholder'],
        'required': json['required'] == null ? undefined : json['required'],
        'value': json['value'] == null ? undefined : json['value'],
    };
}

export function PaylinkCustomParamToJSON(json: any): PaylinkCustomParam {
    return PaylinkCustomParamToJSONTyped(json, false);
}

export function PaylinkCustomParamToJSONTyped(value?: PaylinkCustomParam | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'auth_meta_data': value['authMetaData'],
        'entry_mode': value['entryMode'],
        'field_type': value['fieldType'],
        'group': value['group'],
        'label': value['label'],
        'locked': value['locked'],
        'order': value['order'],
        'pattern': value['pattern'],
        'placeholder': value['placeholder'],
        'required': value['required'],
        'value': value['value'],
    };
}

