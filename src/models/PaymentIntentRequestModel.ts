/* tslint:disable */
/* eslint-disable */
/**
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you\'re integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it\'s a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * The version of the OpenAPI document: 6.9.3
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ContactDetails } from './ContactDetails';
import {
    ContactDetailsFromJSON,
    ContactDetailsFromJSONTyped,
    ContactDetailsToJSON,
    ContactDetailsToJSONTyped,
} from './ContactDetails';
import type { Adjustments } from './Adjustments';
import {
    AdjustmentsFromJSON,
    AdjustmentsFromJSONTyped,
    AdjustmentsToJSON,
    AdjustmentsToJSONTyped,
} from './Adjustments';

/**
 * 
 * @export
 * @interface PaymentIntentRequestModel
 */
export interface PaymentIntentRequestModel {
    /**
     * The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.
     * 
     * No decimal points are to be included and no divisional characters such as 1,024.
     * 
     * The amount should be the total amount required for the transaction.
     * 
     * For example with GBP Â£1,021.95 the amount value is 102195.
     * 
     * @type {number}
     * @memberof PaymentIntentRequestModel
     */
    amount: number;
    /**
     * The identifier of the transaction to process. The value should be a valid reference and may be used to perform
     *  post processing actions and to aid in reconciliation of transactions.
     * 
     * The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.
     * 
     * The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier)
     * this will aid in ensuring each transaction is identifiable.
     * 
     * When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent
     * request will ensure that a transaction is considered as different.
     * 
     * @type {string}
     * @memberof PaymentIntentRequestModel
     */
    identifier: string;
    /**
     * 
     * @type {Adjustments}
     * @memberof PaymentIntentRequestModel
     */
    adjustments?: Adjustments;
    /**
     * A policy value which determines whether an AVS postcode policy is enforced or bypassed.
     * 
     * Values are:
     * 
     *  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.
     * 
     *  `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.
     * 
     *  `2` to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.
     * 
     *  `3` to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.
     * 
     * @type {string}
     * @memberof PaymentIntentRequestModel
     */
    avsPostcodePolicy?: string;
    /**
     * 
     * @type {ContactDetails}
     * @memberof PaymentIntentRequestModel
     */
    billTo?: ContactDetails;
    /**
     * A policy value which determines whether a CSC policy is enforced or bypassed.
     * 
     * Values are:
     * 
     *  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.
     * 
     *  `1` for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.
     * 
     *  `2` to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.
     * 
     *  `3` to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.
     * 
     * @type {string}
     * @memberof PaymentIntentRequestModel
     */
    cscPolicy?: string;
    /**
     * The processing currency for the transaction. Will default to the merchant account currency.
     * @type {string}
     * @memberof PaymentIntentRequestModel
     */
    currency?: string;
    /**
     * A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window
     * of time set against your account within which it can action. If a previous transaction with matching values occurred within
     * the window, any subsequent transaction will result in a T001 result.
     * 
     * Values are
     * 
     *  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.
     * 
     *  `1` for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.
     * 
     *  `2` to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.
     * 
     *  `3` to ignore. Transactions that are ignored will have the same affect as bypass.
     * 
     * @type {string}
     * @memberof PaymentIntentRequestModel
     */
    duplicatePolicy?: string;
    /**
     * A unique identifier, such as an order ID or invoice number, provided by your accounting or billing system to link the payment intent with an external system reference. This ensures traceability across systems for audits and transaction validation.
     * @type {string}
     * @memberof PaymentIntentRequestModel
     */
    externalRef?: string;
    /**
     * Specifies the originating source or system of the external reference, helping to categorise and trace the context of the external identifier, whether it comes from an internal system, third-party vendor, or external financial platform.
     * @type {string}
     * @memberof PaymentIntentRequestModel
     */
    externalRefSource?: string;
    /**
     * A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.
     * 
     * Values are:
     * 
     *  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.
     * 
     *  `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.
     * 
     *  `2` to bypass. Transactions that are bypassed will be allowed through even if the address did not match.
     * 
     *  `3` to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.
     * 
     * @type {string}
     * @memberof PaymentIntentRequestModel
     */
    matchAvsa?: string;
    /**
     * The merchant id of the intent, required if using the API key or not required if using a domain key.
     * @type {number}
     * @memberof PaymentIntentRequestModel
     */
    merchantid?: number;
    /**
     * A policy value which determines whether a pre auth policy is enforced or bypassed.
     * 
     * Values are:
     * 
     *  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.
     * 
     *  `1` for an enforced policy.  Enforces pre-authorisation when it does not pre-auth by default.
     * 
     *  `2` to bypass. Bypasses pre-authorisation when it is enabled to pre auth by default.
     * 
     *  `3` to ignore. The same as the default policy (0). Although it currently mirrors the default, this option is included for compatibility with other policies.
     * 
     * @type {string}
     * @memberof PaymentIntentRequestModel
     */
    preAuth?: string;
    /**
     * 
     * @type {ContactDetails}
     * @memberof PaymentIntentRequestModel
     */
    shipTo?: ContactDetails;
    /**
     * 
     * @type {Array<string>}
     * @memberof PaymentIntentRequestModel
     */
    tag?: Array<string>;
    /**
     * Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id.
     * @type {string}
     * @memberof PaymentIntentRequestModel
     */
    transInfo?: string;
    /**
     * The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field.
     * @type {string}
     * @memberof PaymentIntentRequestModel
     */
    transType?: string;
}

/**
 * Check if a given object implements the PaymentIntentRequestModel interface.
 */
export function instanceOfPaymentIntentRequestModel(value: object): value is PaymentIntentRequestModel {
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('identifier' in value) || value['identifier'] === undefined) return false;
    return true;
}

export function PaymentIntentRequestModelFromJSON(json: any): PaymentIntentRequestModel {
    return PaymentIntentRequestModelFromJSONTyped(json, false);
}

export function PaymentIntentRequestModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentIntentRequestModel {
    if (json == null) {
        return json;
    }
    return {
        
        'amount': json['amount'],
        'identifier': json['identifier'],
        'adjustments': json['adjustments'] == null ? undefined : AdjustmentsFromJSON(json['adjustments']),
        'avsPostcodePolicy': json['avs_postcode_policy'] == null ? undefined : json['avs_postcode_policy'],
        'billTo': json['bill_to'] == null ? undefined : ContactDetailsFromJSON(json['bill_to']),
        'cscPolicy': json['csc_policy'] == null ? undefined : json['csc_policy'],
        'currency': json['currency'] == null ? undefined : json['currency'],
        'duplicatePolicy': json['duplicate_policy'] == null ? undefined : json['duplicate_policy'],
        'externalRef': json['external-ref'] == null ? undefined : json['external-ref'],
        'externalRefSource': json['external-ref-source'] == null ? undefined : json['external-ref-source'],
        'matchAvsa': json['match_avsa'] == null ? undefined : json['match_avsa'],
        'merchantid': json['merchantid'] == null ? undefined : json['merchantid'],
        'preAuth': json['pre_auth'] == null ? undefined : json['pre_auth'],
        'shipTo': json['ship_to'] == null ? undefined : ContactDetailsFromJSON(json['ship_to']),
        'tag': json['tag'] == null ? undefined : json['tag'],
        'transInfo': json['trans_info'] == null ? undefined : json['trans_info'],
        'transType': json['trans_type'] == null ? undefined : json['trans_type'],
    };
}

export function PaymentIntentRequestModelToJSON(json: any): PaymentIntentRequestModel {
    return PaymentIntentRequestModelToJSONTyped(json, false);
}

export function PaymentIntentRequestModelToJSONTyped(value?: PaymentIntentRequestModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'amount': value['amount'],
        'identifier': value['identifier'],
        'adjustments': AdjustmentsToJSON(value['adjustments']),
        'avs_postcode_policy': value['avsPostcodePolicy'],
        'bill_to': ContactDetailsToJSON(value['billTo']),
        'csc_policy': value['cscPolicy'],
        'currency': value['currency'],
        'duplicate_policy': value['duplicatePolicy'],
        'external-ref': value['externalRef'],
        'external-ref-source': value['externalRefSource'],
        'match_avsa': value['matchAvsa'],
        'merchantid': value['merchantid'],
        'pre_auth': value['preAuth'],
        'ship_to': ContactDetailsToJSON(value['shipTo']),
        'tag': value['tag'],
        'trans_info': value['transInfo'],
        'trans_type': value['transType'],
    };
}

