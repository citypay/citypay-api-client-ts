/* tslint:disable */
/* eslint-disable */
/**
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you\'re integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it\'s a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * The version of the OpenAPI document: 6.6.40
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ThreeDSecure } from './ThreeDSecure';
import {
    ThreeDSecureFromJSON,
    ThreeDSecureFromJSONTyped,
    ThreeDSecureToJSON,
} from './ThreeDSecure';

/**
 * 
 * @export
 * @interface ChargeRequest
 */
export interface ChargeRequest {
    /**
     * The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.
     * 
     * No decimal points are to be included and no divisional characters such as 1,024.
     * 
     * The amount should be the total amount required for the transaction.
     * 
     * For example with GBP Â£1,021.95 the amount value is 102195.
     * 
     * @type {number}
     * @memberof ChargeRequest
     */
    amount: number;
    /**
     * The identifier of the transaction to process. The value should be a valid reference and may be used to perform
     *  post processing actions and to aid in reconciliation of transactions.
     * 
     * The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.
     * 
     * The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier)
     * this will aid in ensuring each transaction is identifiable.
     * 
     * When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent
     * request will ensure that a transaction is considered as different.
     * 
     * @type {string}
     * @memberof ChargeRequest
     */
    identifier: string;
    /**
     * Identifies the merchant account to perform processing for.
     * @type {number}
     * @memberof ChargeRequest
     */
    merchantid: number;
    /**
     * A tokenised form of a card that belongs to a card holder's account and that
     * has been previously registered. The token is time based and will only be active for
     * a short duration. The value is therefore designed not to be stored remotely for future
     * use.
     * 
     * 
     * Tokens will start with ct and are resiliently tamper proof using HMacSHA-256.
     * No sensitive card data is stored internally within the token.
     * 
     * 
     * Each card will contain a different token and the value may be different on any retrieval call.
     * 
     * 
     * The value can be presented for payment as a selection value to an end user in a web application.
     * 
     * @type {string}
     * @memberof ChargeRequest
     */
    token: string;
    /**
     * A policy value which determines whether an AVS postcode policy is enforced or bypassed.
     * 
     * Values are:
     * 
     *  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.
     * 
     *  `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.
     * 
     *  `2` to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.
     * 
     *  `3` to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.
     * 
     * @type {string}
     * @memberof ChargeRequest
     */
    avsPostcodePolicy?: string;
    /**
     * Merchant-initiated transactions (MITs) are payments you trigger, where the cardholder has previously consented
     * to you carrying out such payments. These may be scheduled (such as recurring payments and installments) or
     * unscheduled (like account top-ups triggered by balance thresholds and no-show charges).
     * 
     * Scheduled
     * ---
     * These are regular payments using stored card details, like installments or a monthly subscription fee.
     * 
     * - `I` Instalment - A single purchase of goods or services billed to a cardholder in multiple transactions, over a period of time agreed by the cardholder and you.
     * 
     * - `R` Recurring - Transactions processed at fixed, regular intervals not to exceed one year between transactions, representing an agreement between a cardholder and you to purchase goods or services provided over a period of time.
     * 
     * Unscheduled
     * ---
     * These are payments using stored card details that do not occur on a regular schedule, like top-ups for a
     * digital wallet triggered by the balance falling below a certain threshold.
     * 
     * - `A` Reauthorisation - a purchase made after the original purchase. A common scenario is delayed/split shipments.
     * 
     * - `C` Unscheduled Payment - A transaction using a stored credential for a fixed or variable amount that does not occur on a scheduled or regularly occurring transaction date. This includes account top-ups triggered by balance thresholds.
     * 
     * - `D` Delayed Charge - A delayed charge is typically used in hotel, cruise lines and vehicle rental environments to perform a supplemental account charge after original services are rendered.
     * 
     * - `L` Incremental - An incremental authorisation is typically found in hotel and car rental environments, where the cardholder has agreed to pay for any service incurred during the duration of the contract. An incremental authorisation is where you need to seek authorisation of further funds in addition to what you have originally requested. A common scenario is additional services charged to the contract, such as extending a stay in a hotel.
     * 
     * - `S` Resubmission - When the original purchase occurred, but you were not able to get authorisation at the time the goods or services were provided. It should be only used where the goods or services have already been provided, but the authorisation request is declined for insufficient funds.
     * 
     * - `X` No-show - A no-show is a transaction where you are enabled to charge for services which the cardholder entered into an agreement to purchase, but the cardholder did not meet the terms of the agreement.
     * 
     * @type {string}
     * @memberof ChargeRequest
     */
    cardholderAgreement?: string;
    /**
     * The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card
     * (American Express has it on the front). The value helps to identify possession of the card as it is not
     * available within the chip or magnetic swipe.
     * 
     * When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped
     * out by any integer parsing.
     * 
     * The CSC number aids fraud prevention in Mail Order and Internet payments.
     * 
     * Business rules are available on your account to identify whether to accept
     * or decline transactions based on mismatched results of the CSC.
     * 
     * The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.
     * 
     * This applies to all entities handling card data.
     * 
     * It should also not be used in any hashing process.
     * 
     * CityPay do not store the value and have no method of retrieving the value once the transaction has been processed.
     * For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.
     * 
     * @type {string}
     * @memberof ChargeRequest
     */
    csc?: string;
    /**
     * A policy value which determines whether a CSC policy is enforced or bypassed.
     * 
     * Values are:
     * 
     *  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.
     * 
     *  `1` for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.
     * 
     *  `2` to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.
     * 
     *  `3` to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.
     * 
     * @type {string}
     * @memberof ChargeRequest
     */
    cscPolicy?: string;
    /**
     * The processing currency for the transaction. Will default to the merchant account currency.
     * @type {string}
     * @memberof ChargeRequest
     */
    currency?: string;
    /**
     * A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window
     * of time set against your account within which it can action. If a previous transaction with matching values occurred within
     * the window, any subsequent transaction will result in a T001 result.
     * 
     * Values are
     * 
     *  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.
     * 
     *  `1` for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.
     * 
     *  `2` to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.
     * 
     *  `3` to ignore. Transactions that are ignored will have the same affect as bypass.
     * 
     * @type {string}
     * @memberof ChargeRequest
     */
    duplicatePolicy?: string;
    /**
     * Transactions charged using the API are defined as:
     * 
     * **Cardholder Initiated**: A _cardholder initiated transaction_ (CIT) is where the cardholder selects the
     * card for use for a purchase using previously stored details. An example would be a customer buying an item from
     * your website after being present with their saved card details at checkout.
     * 
     * **Merchant Intiated**: A _merchant initiated transaction_ (MIT) is an authorisation initiated where you as the
     *  merchant submit a cardholders previously stored details without the cardholder's participation. An example would
     *  be a subscription to a membership scheme to debit their card monthly.
     * 
     * MITs have different reasons such as reauthorisation, delayed, unscheduled, incremental, recurring, instalment, no-show or resubmission.
     * 
     * The following values apply
     * 
     *  - `M` - specifies that the transaction is initiated by the merchant
     * 
     *  - `C` - specifies that the transaction is initiated by the cardholder
     * 
     * Where transactions are merchant initiated, a valid cardholder agreement must be defined.
     * 
     * @type {string}
     * @memberof ChargeRequest
     */
    initiation?: string;
    /**
     * A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.
     * 
     * Values are:
     * 
     *  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.
     * 
     *  `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.
     * 
     *  `2` to bypass. Transactions that are bypassed will be allowed through even if the address did not match.
     * 
     *  `3` to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.
     * 
     * @type {string}
     * @memberof ChargeRequest
     */
    matchAvsa?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChargeRequest
     */
    tag?: Array<string>;
    /**
     * 
     * @type {ThreeDSecure}
     * @memberof ChargeRequest
     */
    threedsecure?: ThreeDSecure;
    /**
     * Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id.
     * @type {string}
     * @memberof ChargeRequest
     */
    transInfo?: string;
    /**
     * The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field.
     * @type {string}
     * @memberof ChargeRequest
     */
    transType?: string;
}

/**
 * Check if a given object implements the ChargeRequest interface.
 */
export function instanceOfChargeRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "identifier" in value;
    isInstance = isInstance && "merchantid" in value;
    isInstance = isInstance && "token" in value;

    return isInstance;
}

export function ChargeRequestFromJSON(json: any): ChargeRequest {
    return ChargeRequestFromJSONTyped(json, false);
}

export function ChargeRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChargeRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': json['amount'],
        'identifier': json['identifier'],
        'merchantid': json['merchantid'],
        'token': json['token'],
        'avsPostcodePolicy': !exists(json, 'avs_postcode_policy') ? undefined : json['avs_postcode_policy'],
        'cardholderAgreement': !exists(json, 'cardholder_agreement') ? undefined : json['cardholder_agreement'],
        'csc': !exists(json, 'csc') ? undefined : json['csc'],
        'cscPolicy': !exists(json, 'csc_policy') ? undefined : json['csc_policy'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'duplicatePolicy': !exists(json, 'duplicate_policy') ? undefined : json['duplicate_policy'],
        'initiation': !exists(json, 'initiation') ? undefined : json['initiation'],
        'matchAvsa': !exists(json, 'match_avsa') ? undefined : json['match_avsa'],
        'tag': !exists(json, 'tag') ? undefined : json['tag'],
        'threedsecure': !exists(json, 'threedsecure') ? undefined : ThreeDSecureFromJSON(json['threedsecure']),
        'transInfo': !exists(json, 'trans_info') ? undefined : json['trans_info'],
        'transType': !exists(json, 'trans_type') ? undefined : json['trans_type'],
    };
}

export function ChargeRequestToJSON(value?: ChargeRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': value.amount,
        'identifier': value.identifier,
        'merchantid': value.merchantid,
        'token': value.token,
        'avs_postcode_policy': value.avsPostcodePolicy,
        'cardholder_agreement': value.cardholderAgreement,
        'csc': value.csc,
        'csc_policy': value.cscPolicy,
        'currency': value.currency,
        'duplicate_policy': value.duplicatePolicy,
        'initiation': value.initiation,
        'match_avsa': value.matchAvsa,
        'tag': value.tag,
        'threedsecure': ThreeDSecureToJSON(value.threedsecure),
        'trans_info': value.transInfo,
        'trans_type': value.transType,
    };
}

