/* tslint:disable */
/* eslint-disable */
/**
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you\'re integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it\'s a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * The version of the OpenAPI document: 6.6.40
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountCreate,
  AccountStatus,
  Acknowledgement,
  CardHolderAccount,
  CardStatus,
  ChargeRequest,
  ContactDetails,
  Decision,
  Exists,
  RegisterCard,
} from '../models/index';
import {
    AccountCreateFromJSON,
    AccountCreateToJSON,
    AccountStatusFromJSON,
    AccountStatusToJSON,
    AcknowledgementFromJSON,
    AcknowledgementToJSON,
    CardHolderAccountFromJSON,
    CardHolderAccountToJSON,
    CardStatusFromJSON,
    CardStatusToJSON,
    ChargeRequestFromJSON,
    ChargeRequestToJSON,
    ContactDetailsFromJSON,
    ContactDetailsToJSON,
    DecisionFromJSON,
    DecisionToJSON,
    ExistsFromJSON,
    ExistsToJSON,
    RegisterCardFromJSON,
    RegisterCardToJSON,
} from '../models/index';

export interface CardHolderAccountApiAccountCardDeleteRequest {
    accountid: string;
    card_id: string;
    force?: boolean;
}

export interface CardHolderAccountApiAccountCardRegisterRequest {
    accountid: string;
    register_card: RegisterCard;
}

export interface CardHolderAccountApiAccountCardStatusRequest {
    accountid: string;
    card_id: string;
    card_status: CardStatus;
}

export interface CardHolderAccountApiAccountChangeContactRequest {
    accountid: string;
    contact_details: ContactDetails;
}

export interface CardHolderAccountApiAccountCreate {
    account_create: AccountCreate;
}

export interface CardHolderAccountApiAccountDeleteRequest {
    accountid: string;
}

export interface CardHolderAccountApiAccountExistsRequest {
    accountid: string;
}

export interface CardHolderAccountApiAccountRetrieveRequest {
    accountid: string;
}

export interface CardHolderAccountApiAccountStatusRequest {
    accountid: string;
    account_status: AccountStatus;
}

export interface CardHolderAccountApiChargeRequest {
    charge_request: ChargeRequest;
}

/**
 * 
 */
export class CardHolderAccountApi extends runtime.BaseAPI {

    /**
     * Deletes a card from the account. The card will be marked for deletion before a subsequent purge will clear the card permanently. 
     * Card Deletion
     */
    async accountCardDeleteRequestRaw(requestParameters: CardHolderAccountApiAccountCardDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Acknowledgement>> {
        if (requestParameters.accountid === null || requestParameters.accountid === undefined) {
            throw new runtime.RequiredError('accountid','Required parameter requestParameters.accountid was null or undefined when calling accountCardDeleteRequest.');
        }

        if (requestParameters.card_id === null || requestParameters.card_id === undefined) {
            throw new runtime.RequiredError('card_id','Required parameter requestParameters.card_id was null or undefined when calling accountCardDeleteRequest.');
        }

        const queryParameters: any = {};

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["cp-api-key"] = this.configuration.apiKey("cp-api-key"); // cp-api-key authentication
        }

        const response = await this.request({
            path: `/v6/account/{accountid}/card/{cardId}`.replace(`{${"accountid"}}`, encodeURIComponent(String(requestParameters.accountid))).replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters.card_id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AcknowledgementFromJSON(jsonValue));
    }

    /**
     * Deletes a card from the account. The card will be marked for deletion before a subsequent purge will clear the card permanently. 
     * Card Deletion
     */
    async accountCardDeleteRequest(requestParameters: CardHolderAccountApiAccountCardDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Acknowledgement> {
        const response = await this.accountCardDeleteRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows for a card to be registered for the account. The card will be added for future  processing and will be available as a tokenised value for future processing.  The card will be validated for  0. Being a valid card number (luhn check) 0. Having a valid expiry date 0. Being a valid bin value. 
     * Card Registration
     */
    async accountCardRegisterRequestRaw(requestParameters: CardHolderAccountApiAccountCardRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CardHolderAccount>> {
        if (requestParameters.accountid === null || requestParameters.accountid === undefined) {
            throw new runtime.RequiredError('accountid','Required parameter requestParameters.accountid was null or undefined when calling accountCardRegisterRequest.');
        }

        if (requestParameters.register_card === null || requestParameters.register_card === undefined) {
            throw new runtime.RequiredError('register_card','Required parameter requestParameters.register_card was null or undefined when calling accountCardRegisterRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["cp-api-key"] = this.configuration.apiKey("cp-api-key"); // cp-api-key authentication
        }

        const response = await this.request({
            path: `/v6/account/{accountid}/register`.replace(`{${"accountid"}}`, encodeURIComponent(String(requestParameters.accountid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterCardToJSON(requestParameters.register_card),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CardHolderAccountFromJSON(jsonValue));
    }

    /**
     * Allows for a card to be registered for the account. The card will be added for future  processing and will be available as a tokenised value for future processing.  The card will be validated for  0. Being a valid card number (luhn check) 0. Having a valid expiry date 0. Being a valid bin value. 
     * Card Registration
     */
    async accountCardRegisterRequest(requestParameters: CardHolderAccountApiAccountCardRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CardHolderAccount> {
        const response = await this.accountCardRegisterRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the status of a card for processing. The following values are available  | Status | Description |  |--------|-------------| | Active | The card is active for processing and can be used for charging against with a valid token | | Inactive | The card is inactive for processing and cannot be used for processing, it will require reactivation before being used to charge | | Expired | The card has expired either due to the expiry date no longer being valid or due to a replacement card being issued | 
     * Card Status
     */
    async accountCardStatusRequestRaw(requestParameters: CardHolderAccountApiAccountCardStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Acknowledgement>> {
        if (requestParameters.accountid === null || requestParameters.accountid === undefined) {
            throw new runtime.RequiredError('accountid','Required parameter requestParameters.accountid was null or undefined when calling accountCardStatusRequest.');
        }

        if (requestParameters.card_id === null || requestParameters.card_id === undefined) {
            throw new runtime.RequiredError('card_id','Required parameter requestParameters.card_id was null or undefined when calling accountCardStatusRequest.');
        }

        if (requestParameters.card_status === null || requestParameters.card_status === undefined) {
            throw new runtime.RequiredError('card_status','Required parameter requestParameters.card_status was null or undefined when calling accountCardStatusRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["cp-api-key"] = this.configuration.apiKey("cp-api-key"); // cp-api-key authentication
        }

        const response = await this.request({
            path: `/v6/account/{accountid}/card/{cardId}/status`.replace(`{${"accountid"}}`, encodeURIComponent(String(requestParameters.accountid))).replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters.card_id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CardStatusToJSON(requestParameters.card_status),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AcknowledgementFromJSON(jsonValue));
    }

    /**
     * Updates the status of a card for processing. The following values are available  | Status | Description |  |--------|-------------| | Active | The card is active for processing and can be used for charging against with a valid token | | Inactive | The card is inactive for processing and cannot be used for processing, it will require reactivation before being used to charge | | Expired | The card has expired either due to the expiry date no longer being valid or due to a replacement card being issued | 
     * Card Status
     */
    async accountCardStatusRequest(requestParameters: CardHolderAccountApiAccountCardStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Acknowledgement> {
        const response = await this.accountCardStatusRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows for the ability to change the contact details for an account.
     * Contact Details Update
     */
    async accountChangeContactRequestRaw(requestParameters: CardHolderAccountApiAccountChangeContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CardHolderAccount>> {
        if (requestParameters.accountid === null || requestParameters.accountid === undefined) {
            throw new runtime.RequiredError('accountid','Required parameter requestParameters.accountid was null or undefined when calling accountChangeContactRequest.');
        }

        if (requestParameters.contact_details === null || requestParameters.contact_details === undefined) {
            throw new runtime.RequiredError('contact_details','Required parameter requestParameters.contact_details was null or undefined when calling accountChangeContactRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["cp-api-key"] = this.configuration.apiKey("cp-api-key"); // cp-api-key authentication
        }

        const response = await this.request({
            path: `/v6/account/{accountid}/contact`.replace(`{${"accountid"}}`, encodeURIComponent(String(requestParameters.accountid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContactDetailsToJSON(requestParameters.contact_details),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CardHolderAccountFromJSON(jsonValue));
    }

    /**
     * Allows for the ability to change the contact details for an account.
     * Contact Details Update
     */
    async accountChangeContactRequest(requestParameters: CardHolderAccountApiAccountChangeContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CardHolderAccount> {
        const response = await this.accountChangeContactRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new card holder account and initialises the account ready for adding cards.
     * Account Create
     */
    async accountCreateRaw(requestParameters: CardHolderAccountApiAccountCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CardHolderAccount>> {
        if (requestParameters.account_create === null || requestParameters.account_create === undefined) {
            throw new runtime.RequiredError('account_create','Required parameter requestParameters.account_create was null or undefined when calling accountCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["cp-api-key"] = this.configuration.apiKey("cp-api-key"); // cp-api-key authentication
        }

        const response = await this.request({
            path: `/v6/account/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountCreateToJSON(requestParameters.account_create),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CardHolderAccountFromJSON(jsonValue));
    }

    /**
     * Creates a new card holder account and initialises the account ready for adding cards.
     * Account Create
     */
    async accountCreate(requestParameters: CardHolderAccountApiAccountCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CardHolderAccount> {
        const response = await this.accountCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows for the deletion of an account. The account will marked for deletion and subsequent purging. No further transactions will be alowed to be processed or actioned against this account. 
     * Account Deletion
     */
    async accountDeleteRequestRaw(requestParameters: CardHolderAccountApiAccountDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Acknowledgement>> {
        if (requestParameters.accountid === null || requestParameters.accountid === undefined) {
            throw new runtime.RequiredError('accountid','Required parameter requestParameters.accountid was null or undefined when calling accountDeleteRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["cp-api-key"] = this.configuration.apiKey("cp-api-key"); // cp-api-key authentication
        }

        const response = await this.request({
            path: `/v6/account/{accountid}`.replace(`{${"accountid"}}`, encodeURIComponent(String(requestParameters.accountid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AcknowledgementFromJSON(jsonValue));
    }

    /**
     * Allows for the deletion of an account. The account will marked for deletion and subsequent purging. No further transactions will be alowed to be processed or actioned against this account. 
     * Account Deletion
     */
    async accountDeleteRequest(requestParameters: CardHolderAccountApiAccountDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Acknowledgement> {
        const response = await this.accountDeleteRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Checks that an account exists and is active by providing the account id as a url parameter. 
     * Account Exists
     */
    async accountExistsRequestRaw(requestParameters: CardHolderAccountApiAccountExistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Exists>> {
        if (requestParameters.accountid === null || requestParameters.accountid === undefined) {
            throw new runtime.RequiredError('accountid','Required parameter requestParameters.accountid was null or undefined when calling accountExistsRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["cp-api-key"] = this.configuration.apiKey("cp-api-key"); // cp-api-key authentication
        }

        const response = await this.request({
            path: `/v6/account-exists/{accountid}`.replace(`{${"accountid"}}`, encodeURIComponent(String(requestParameters.accountid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExistsFromJSON(jsonValue));
    }

    /**
     * Checks that an account exists and is active by providing the account id as a url parameter. 
     * Account Exists
     */
    async accountExistsRequest(requestParameters: CardHolderAccountApiAccountExistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Exists> {
        const response = await this.accountExistsRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows for the retrieval of a card holder account for the given `id`. Should duplicate accounts exist for the same `id`, the first account created with that `id` will be returned.  The account can be used for tokenisation processing by listing all cards assigned to the account. The returned cards will include all `active`, `inactive` and `expired` cards. This can be used to  enable a card holder to view their wallet and make constructive choices on which card to use. 
     * Account Retrieval
     */
    async accountRetrieveRequestRaw(requestParameters: CardHolderAccountApiAccountRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CardHolderAccount>> {
        if (requestParameters.accountid === null || requestParameters.accountid === undefined) {
            throw new runtime.RequiredError('accountid','Required parameter requestParameters.accountid was null or undefined when calling accountRetrieveRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["cp-api-key"] = this.configuration.apiKey("cp-api-key"); // cp-api-key authentication
        }

        const response = await this.request({
            path: `/v6/account/{accountid}`.replace(`{${"accountid"}}`, encodeURIComponent(String(requestParameters.accountid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CardHolderAccountFromJSON(jsonValue));
    }

    /**
     * Allows for the retrieval of a card holder account for the given `id`. Should duplicate accounts exist for the same `id`, the first account created with that `id` will be returned.  The account can be used for tokenisation processing by listing all cards assigned to the account. The returned cards will include all `active`, `inactive` and `expired` cards. This can be used to  enable a card holder to view their wallet and make constructive choices on which card to use. 
     * Account Retrieval
     */
    async accountRetrieveRequest(requestParameters: CardHolderAccountApiAccountRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CardHolderAccount> {
        const response = await this.accountRetrieveRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the status of an account. An account can have the following statuses applied  | Status | Description | |--------|-------------| | Active | The account is active for processing | | Disabled | The account has been disabled and cannot be used for processing. The account will require reactivation to continue procesing | 
     * Account Status
     */
    async accountStatusRequestRaw(requestParameters: CardHolderAccountApiAccountStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Acknowledgement>> {
        if (requestParameters.accountid === null || requestParameters.accountid === undefined) {
            throw new runtime.RequiredError('accountid','Required parameter requestParameters.accountid was null or undefined when calling accountStatusRequest.');
        }

        if (requestParameters.account_status === null || requestParameters.account_status === undefined) {
            throw new runtime.RequiredError('account_status','Required parameter requestParameters.account_status was null or undefined when calling accountStatusRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["cp-api-key"] = this.configuration.apiKey("cp-api-key"); // cp-api-key authentication
        }

        const response = await this.request({
            path: `/v6/account/{accountid}/status`.replace(`{${"accountid"}}`, encodeURIComponent(String(requestParameters.accountid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountStatusToJSON(requestParameters.account_status),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AcknowledgementFromJSON(jsonValue));
    }

    /**
     * Updates the status of an account. An account can have the following statuses applied  | Status | Description | |--------|-------------| | Active | The account is active for processing | | Disabled | The account has been disabled and cannot be used for processing. The account will require reactivation to continue procesing | 
     * Account Status
     */
    async accountStatusRequest(requestParameters: CardHolderAccountApiAccountStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Acknowledgement> {
        const response = await this.accountStatusRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A charge process obtains an authorisation using a tokenised value which represents a stored card  on a card holder account.  A card must previously be registered by calling `/account-register-card` with the card details  or retrieved using `/account-retrieve`  Tokens are generated whenever a previously registered list of cards are retrieved. Each token has, by design a  relatively short time to live of 30 minutes. This is both to safe guard the merchant and card holder from  replay attacks. Tokens are also restricted to your account, preventing malicious actors from stealing details for use elsewhere.    If a token is reused after it has expired it will be rejected and a new token will be required.   Tokenisation can be used for   - repeat authorisations on a previously stored card - easy authorisations just requiring CSC values to be entered - can be used for credential on file style payments - can require full 3-D Secure authentication to retain the liability shift - wallet style usage    _Should an account be used with 3DSv2, the card holder name should also be stored alongside the card as this is a required field with both Visa and MasterCard for risk analysis._. 
     * Charge
     */
    async chargeRequestRaw(requestParameters: CardHolderAccountApiChargeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Decision>> {
        if (requestParameters.charge_request === null || requestParameters.charge_request === undefined) {
            throw new runtime.RequiredError('charge_request','Required parameter requestParameters.charge_request was null or undefined when calling chargeRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["cp-api-key"] = this.configuration.apiKey("cp-api-key"); // cp-api-key authentication
        }

        const response = await this.request({
            path: `/v6/charge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChargeRequestToJSON(requestParameters.charge_request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DecisionFromJSON(jsonValue));
    }

    /**
     * A charge process obtains an authorisation using a tokenised value which represents a stored card  on a card holder account.  A card must previously be registered by calling `/account-register-card` with the card details  or retrieved using `/account-retrieve`  Tokens are generated whenever a previously registered list of cards are retrieved. Each token has, by design a  relatively short time to live of 30 minutes. This is both to safe guard the merchant and card holder from  replay attacks. Tokens are also restricted to your account, preventing malicious actors from stealing details for use elsewhere.    If a token is reused after it has expired it will be rejected and a new token will be required.   Tokenisation can be used for   - repeat authorisations on a previously stored card - easy authorisations just requiring CSC values to be entered - can be used for credential on file style payments - can require full 3-D Secure authentication to retain the liability shift - wallet style usage    _Should an account be used with 3DSv2, the card holder name should also be stored alongside the card as this is a required field with both Visa and MasterCard for risk analysis._. 
     * Charge
     */
    async chargeRequest(requestParameters: CardHolderAccountApiChargeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Decision> {
        const response = await this.chargeRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
